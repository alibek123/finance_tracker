// src/components/transactions/TransactionForm.tsx
import {useForm, Controller} from 'react-hook-form';
import {zodResolver} from '@hookform/resolvers/zod';
import {z} from 'zod';
import {X} from 'lucide-react';
import {useAccounts} from '../../hooks/useAccounts';
import {useCategories} from '../../hooks/useCategories';
import {useTags} from '../../hooks/useTags';
import {useCreateTransaction} from '../../hooks/useTransactions';
import {useAppStore} from '../../store/useAppStore';
import Select from 'react-select';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const transactionSchema = z.object({
    type: z.enum(['expense', 'income', 'transfer']),
    amount: z.number().positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'),
    date: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'),
    description: z.string().optional(),
    account_from_id: z.number().optional(),
    account_to_id: z.number().optional(),
    category_id: z.number().optional(),
    tag_ids: z.array(z.number()).optional(),
}).refine((data) => {
    if (data.type === 'expense') {
        return !!data.account_from_id && !!data.category_id;
    }
    if (data.type === 'income') {
        return !!data.account_to_id && !!data.category_id;
    }
    if (data.type === 'transfer') {
        return !!data.account_from_id && !!data.account_to_id;
    }
    return false;
}, {
    message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
    path: ['type'],
});

type TransactionFormData = z.infer<typeof transactionSchema>;

interface TransactionFormProps {
    onClose: () => void;
    onSuccess?: () => void;
}

export function TransactionForm({onClose, onSuccess}: TransactionFormProps) {
    const selectedDate = useAppStore((state) => state.selectedDate);
    const {data: accounts} = useAccounts();
    const {data: categories} = useCategories();
    const {data: tags} = useTags();
    const createTransaction = useCreateTransaction();

    const {
        register,
        control,
        handleSubmit,
        watch,
        formState: {errors},
        reset,
    } = useForm<TransactionFormData>({
        resolver: zodResolver(transactionSchema),
        defaultValues: {
            type: 'expense',
            date: selectedDate,
            tag_ids: [],
        },
    });

    const transactionType = watch('type');

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const filteredCategories = categories?.filter(
        (cat: { type: string; }) => cat.type === transactionType
    );

    const onSubmit = async (data: TransactionFormData) => {
        try {
            await createTransaction.mutateAsync({
                transaction_type: data.type,
                amount: data.amount,
                date: data.date,
                description: data.description,
                account_from_id: data.account_from_id,
                account_to_id: data.account_to_id,
                category_id: data.category_id,
                tag_ids: data.tag_ids,
            });
            reset();
            onSuccess?.();
            onClose();
        } catch (error) {
            // –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ö—É–∫–µ
        }
    };

    return (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white dark:bg-gray-800 rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
                <div
                    className="sticky top-0 bg-white dark:bg-gray-800 border-b dark:border-gray-700 px-6 py-4 flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                        –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    </h3>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                    >
                        <X size={24}/>
                    </button>
                </div>

                <form onSubmit={handleSubmit(onSubmit)} className="p-6 space-y-4">
                    {/* –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                        </label>
                        <div className="grid grid-cols-3 gap-2">
                            <label className="relative">
                                <input
                                    type="radio"
                                    value="expense"
                                    {...register('type')}
                                    className="sr-only peer"
                                />
                                <div
                                    className="text-center py-2 px-3 border rounded-lg cursor-pointer peer-checked:bg-red-100 peer-checked:border-red-500 peer-checked:text-red-700 dark:peer-checked:bg-red-900 dark:peer-checked:text-red-200 hover:bg-gray-50 dark:hover:bg-gray-700">
                                    –†–∞—Å—Ö–æ–¥
                                </div>
                            </label>
                            <label className="relative">
                                <input
                                    type="radio"
                                    value="income"
                                    {...register('type')}
                                    className="sr-only peer"
                                />
                                <div
                                    className="text-center py-2 px-3 border rounded-lg cursor-pointer peer-checked:bg-green-100 peer-checked:border-green-500 peer-checked:text-green-700 dark:peer-checked:bg-green-900 dark:peer-checked:text-green-200 hover:bg-gray-50 dark:hover:bg-gray-700">
                                    –î–æ—Ö–æ–¥
                                </div>
                            </label>
                            <label className="relative">
                                <input
                                    type="radio"
                                    value="transfer"
                                    {...register('type')}
                                    className="sr-only peer"
                                />
                                <div
                                    className="text-center py-2 px-3 border rounded-lg cursor-pointer peer-checked:bg-blue-100 peer-checked:border-blue-500 peer-checked:text-blue-700 dark:peer-checked:bg-blue-900 dark:peer-checked:text-blue-200 hover:bg-gray-50 dark:hover:bg-gray-700">
                                    –ü–µ—Ä–µ–≤–æ–¥
                                </div>
                            </label>
                        </div>
                    </div>

                    {/* –°—É–º–º–∞ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            –°—É–º–º–∞
                        </label>
                        <input
                            type="number"
                            step="0.01"
                            {...register('amount', {valueAsNumber: true})}
                            className="input"
                            placeholder="0"
                        />
                        {errors.amount && (
                            <p className="mt-1 text-sm text-red-600">{errors.amount.message}</p>
                        )}
                    </div>

                    {/* –°—á–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞) */}
                    {(transactionType === 'expense' || transactionType === 'transfer') && (
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                {transactionType === 'expense' ? '–°—á–µ—Ç' : '–°–æ —Å—á–µ—Ç–∞'}
                            </label>
                            <Controller
                                name="account_from_id"
                                control={control}
                                render={({field}) => (
                                    <Select
                                        {...field}
                                        options={accounts?.map(acc => ({
                                            value: acc.id,
                                            label: `${acc.icon || 'üí≥'} ${acc.name} (${acc.current_balance.toLocaleString()} ‚Ç∏)`,
                                        }))}
                                        onChange={(option) => field.onChange(option?.value)}
                                        value={accounts?.find(acc => acc.id === field.value) ? {
                                            value: field.value,
                                            label: accounts.find(acc => acc.id === field.value)!.name,
                                        } : null}
                                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç"
                                        className="react-select-container"
                                        classNamePrefix="react-select"
                                        theme={(theme) => ({
                                            ...theme,
                                            colors: {
                                                ...theme.colors,
                                                primary: '#3b82f6',
                                            },
                                        })}
                                    />
                                )}
                            />
                        </div>
                    )}

                    {/* –°—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è (–¥–ª—è –¥–æ—Ö–æ–¥–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞) */}
                    {(transactionType === 'income' || transactionType === 'transfer') && (
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                {transactionType === 'income' ? '–°—á–µ—Ç' : '–ù–∞ —Å—á–µ—Ç'}
                            </label>
                            <Controller
                                name="account_to_id"
                                control={control}
                                render={({field}) => (
                                    <Select
                                        {...field}
                                        options={accounts?.map(acc => ({
                                            value: acc.id,
                                            label: `${acc.icon || 'üí≥'} ${acc.name} (${acc.current_balance.toLocaleString()} ‚Ç∏)`,
                                        }))}
                                        onChange={(option) => field.onChange(option?.value)}
                                        value={accounts?.find(acc => acc.id === field.value) ? {
                                            value: field.value,
                                            label: accounts.find(acc => acc.id === field.value)!.name,
                                        } : null}
                                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç"
                                        className="react-select-container"
                                        classNamePrefix="react-select"
                                    />
                                )}
                            />
                        </div>
                    )}

                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤) */}
                    {transactionType !== 'transfer' && (
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                            </label>
                            <Controller
                                name="category_id"
                                control={control}
                                render={({field}) => (
                                    <Select
                                        {...field}
                                        options={filteredCategories?.map(cat => ({
                                            value: cat.id,
                                            label: `${cat.icon || 'üìÅ'} ${cat.name}`,
                                        }))}
                                        onChange={(option) => field.onChange(option?.value)}
                                        value={filteredCategories?.find(cat => cat.id === field.value) ? {
                                            value: field.value,
                                            label: filteredCategories.find(cat => cat.id === field.value)!.name,
                                        } : null}
                                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                                        className="react-select-container"
                                        classNamePrefix="react-select"
                                    />
                                )}
                            />
                        </div>
                    )}

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                        </label>
                        <input
                            type="text"
                            {...register('description')}
                            className="input"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±–µ–¥ –≤ –∫–∞—Ñ–µ"
                        />
                    </div>

                    {/* –¢–µ–≥–∏ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            –¢–µ–≥–∏
                        </label>
                        <Controller
                            name="tag_ids"
                            control={control}
                            render={({field}) => (
                                <Select
                                    {...field}
                                    isMulti
                                    options={tags?.map(tag => ({
                                        value: tag.id,
                                        label: tag.name,
                                    }))}
                                    onChange={(options) => field.onChange(options.map(opt => opt.value))}
                                    value={tags?.filter(tag => field.value?.includes(tag.id)).map(tag => ({
                                        value: tag.id,
                                        label: tag.name,
                                    }))}
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏"
                                    className="react-select-container"
                                    classNamePrefix="react-select"
                                />
                            )}
                        />
                    </div>

                    {/* –î–∞—Ç–∞ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            –î–∞—Ç–∞
                        </label>
                        <input
                            type="date"
                            {...register('date')}
                            className="input"
                        />
                        {errors.date && (
                            <p className="mt-1 text-sm text-red-600">{errors.date.message}</p>
                        )}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <div className="flex justify-end space-x-3 pt-4">
                        <button
                            type="button"
                            onClick={onClose}
                            className="btn btn-secondary"
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button
                            type="submit"
                            disabled={createTransaction.isPending}
                            className="btn btn-primary"
                        >
                            {createTransaction.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}